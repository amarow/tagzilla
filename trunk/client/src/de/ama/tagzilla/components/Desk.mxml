<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:ns1="bom.*" xmlns:comps="components.*"
           backgroundAlpha="1.0"
           bottom="0" top="2" left="2" right="2"
           cornerRadius="11" borderStyle="solid" alpha="0.84" themeColor="#ACBCC6"
           backgroundColor="#F5EED9"
           dragEnter="dragEnterHandler(event)"
           dragDrop="dragDropHandler(event)"
           width="1000" height="800"
           initialize="bootstrap()">

    <mx:Script><![CDATA[


        import de.ama.framework.action.ActionStarter;
        import de.ama.framework.action.LogoutAction;
        import de.ama.framework.data.Data;
        import de.ama.framework.data.DataTable;
        import de.ama.framework.util.Util;
        import de.ama.tagzilla.actions.DeskAction;
        import de.ama.tagzilla.actions.GetHandlesAction;
        import de.ama.tagzilla.data.DeskData;
        import de.ama.tagzilla.data.DeskHandleData;
        import de.ama.tagzilla.data.HandleData;
        import de.ama.tagzilla.data.TagData;
        import de.ama.tagzilla.components.img.Images;

        import mx.events.DragEvent;
        import mx.managers.DragManager;
        import mx.managers.PopUpManager;

        private function bootstrap():void {
            addContextMenu();
            addEventListener(KeyboardEvent.KEY_DOWN, reportKeyDown);
        }

        private function logout():void {
            var a:LogoutAction = new LogoutAction();
            ActionStarter.instance.execute(a, this);

        }

        private function searchChanged(event:Event):void {
            var a:GetHandlesAction = new GetHandlesAction();
            a.path = "";

            if (searchInput1.text.length > 0) {
                a.path += searchInput1.text + "*";
            }

            if (searchInput2.text.length > 0) {
                if (a.path.length == 0) a.path = "*";
                a.path += searchInput2.text + "*";
            }
            if (searchInput3.text.length > 0) {
                if (a.path.length == 0) a.path = "*";
                a.path += searchInput3.text;
            }

            ActionStarter.instance.execute(a, this);

        }

        private var dto:DeskData = new DeskData();


        private function mouseMoveHandler(event:MouseEvent):void {

            //            // Get the drag initiator component from the event object.
            //            var dragInitiator:Canvas=Canvas(event.currentTarget);
            //
            //            // Create a DragSource object.
            //            var ds:DragSource = new DragSource();
            //
            //            // Add the de.ama.tagzilla.data to the object.
            //            ds.addData(dragColor, 'color');
            //
            //            // Call the DragManager doDrag() method to start the drag.
            //            DragManager.doDrag(dragInitiator, ds, event);
        }

        private function dragEnterHandler(event:DragEvent):void {
            if (event.dragSource.hasFormat('items')) {
                var dropTarget:Canvas = event.currentTarget as Canvas;
                DragManager.acceptDragDrop(dropTarget);
            }

        }

        private function dragDropHandler(event:DragEvent):void {
            if (event.dragSource.hasFormat('items')) {
                var obj:Object = event.dragSource.dataForFormat('items');
                var n:int = obj.length;
                var i:int;
                var handle:DeskHandle;
                for (i = 0; i < n; i++) {
                    if (obj[i] is HandleData) {
                        handle = new DeskHandle(new DeskHandleData(HandleData(obj[i])));
                    } else if (dto[i] is DeskHandleData) {
                        handle = new DeskHandle(DeskHandleData(obj[i]));
                    } else if (dto[i] is Handle) {
                        handle = obj[i];
                    }
                    this.addChild(handle);

                    handle.x = event.localX;
                    handle.y = event.localY + i * 20;
                }
            }
        }

        private function createNewFile():void {
            var handle:DeskHandle = new DeskHandle();
            this.addChild(handle);
            handle.x=100;
            handle.y=100;
        }


        public function createNewTag():void {
            var tag:Tag = new Tag();
            this.addChild(tag);
            tag.tag = "new tag";
            tag.showConfig();
        }


        public function saveDesk():void {
            var a:DeskAction = new DeskAction();
            a.save = true;
            ActionStarter.instance.execute(a, this);
        }


        public function loadDesk():void {
            whipeOut();
            var a:DeskAction = new DeskAction();
            a.save = false;
            ActionStarter.instance.execute(a, this);
        }


        public function whipeOut():void {
            var arr:Array = getChildren();
            var n:int = arr.length;
            for (var i:int = 0; i < n; i++) {
                if (arr[i] is DeskHandle || arr[i] is Tag) {
                    removeChild(arr[i]);
                }
            }

        }

        public function setData(adata:DeskData):void {
            whipeOut();
            dto = adata;

            var n:int = dto.objects.length;
            for (var i:int = 0; i < n; i++) {
                var temp:Data = dto.objects.getItemAt(i);
                if (temp is DeskHandleData) {
                    addChild(new DeskHandle(DeskHandleData(temp)));
                }
                if (temp is TagData) {
                    addChild(new Tag(TagData(temp)));
                }
            }


        }

        public function getData():DeskData {
            dto.objects = new DataTable();
            dto.name = "Harry";
            var arr:Array = getChildren();
            var n:int = arr.length;
            for (var i:int = 0; i < n; i++) {
                var temp:Object = arr[i];
                if (temp is DeskHandle) {
                    dto.objects.addItem(DeskHandle(temp).getData());
                }
                if (temp is Tag) {
                    dto.objects.addItem(Tag(temp).getData());
                }
            }
            return dto;
        }


        private function addContextMenu():void {
            var menu:ContextMenu = new ContextMenu();


            var menuItem:ContextMenuItem = new ContextMenuItem('Add File');
            menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void {
                createNewFile();
            });
            menu.customItems.push(menuItem);

            menuItem = new ContextMenuItem('Add Tag');
            menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void {
                createNewTag();
            });
            menu.customItems.push(menuItem);


            menuItem = new ContextMenuItem('Clean Desk');
            menuItem.separatorBefore = true;
            menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void {
                whipeOut();
            });
            menu.customItems.push(menuItem);


            menuItem = new ContextMenuItem('Load Desk');
            menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void {
                loadDesk();
            });
            menu.customItems.push(menuItem);

            menuItem = new ContextMenuItem('Save Desk');
            menuItem.addEventListener(ContextMenuEvent.MENU_ITEM_SELECT, function(e:ContextMenuEvent):void {
                saveDesk();
            });
            menu.customItems.push(menuItem);


            menu.hideBuiltInItems();
            this.contextMenu = menu;
        }


        private function reportKeyDown(event:KeyboardEvent):void{

            if (event.ctrlKey && event.charCode == 102) {
                var dlg:SearchDialog = SearchDialog(PopUpManager.createPopUp(parent, SearchDialog, false));
                dlg.x = (width / 2 - (dlg.width / 2));
                dlg.y = 250;
            } else {
                if (event.ctrlKey && event.charCode > 0) {
                    Util.showMessage("Key Pressed: " + event.charCode + " / " + event.keyCode);
                }
            }
        }

        ]]>
    </mx:Script>
    <mx:TextInput left="58" bottom="10" id="searchInput1" change="searchChanged(event);" cornerRadius="4"
    color="#6E1506" width="232"/>
    <mx:Label text="count" width="40" color="#F4410A" textAlign="right" left="10" bottom="12" id="count"/>
    <mx:TextInput left="298" bottom="10" id="searchInput2" change="searchChanged(event);" cornerRadius="4"
    color="#6E1506" width="232"/>
    <mx:TextInput left="540" bottom="10" id="searchInput3" change="searchChanged(event);" cornerRadius="4"
    color="#6E1506" width="116"/>
    <mx:LinkButton label="logout" click="logout()" fontSize="8" color="#0D1796" right="3" top="5"/>
    <mx:Image x="10" y="10" width="16" source="{Images.OPEN_PNG}" height="16" mouseOver=""/>

</mx:Canvas>