<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:ns1="bom.*" xmlns:comps="components.*"
           backgroundAlpha="0.86"
           bottom="0" top="2" left="2" right="2"
           cornerRadius="11" borderStyle="solid" alpha="0.84" themeColor="#ACBCC6"
           backgroundColor="#F5EED9"
           dragEnter="dragEnterHandler(event)"
           dragDrop="dragDropHandler(event)"
           width="1000" height="800">

    <mx:Script><![CDATA[
        import actions.DeskAction;

        import actions.GetHandlesAction;

        import components.Handle;
        import components.Tag;

        import data.DeskData;
        import data.HandleData;
        import data.TagData;

        import framework.cs.*;

        import mx.events.DragEvent;
        import mx.managers.DragManager;


        private function searchChanged(event:Event):void {
            var a:GetHandlesAction = new GetHandlesAction();
            a.path="";

            if (searchInput1.text.length > 0) {
                a.path += searchInput1.text+"*";
            }

            if (searchInput2.text.length > 0) {
                if(a.path.length==0) a.path="*";
                a.path += searchInput2.text+"*";
            }
            if (searchInput3.text.length > 0) {
                if(a.path.length==0) a.path="*";
                a.path += searchInput3.text;
            }
            
            ActionStarter.instance.execute(a, this);

        }

        private var dto:DeskData = new DeskData();


        private function mouseMoveHandler(event:MouseEvent):void {

            //            // Get the drag initiator component from the event object.
            //            var dragInitiator:Canvas=Canvas(event.currentTarget);
            //
            //            // Create a DragSource object.
            //            var ds:DragSource = new DragSource();
            //
            //            // Add the data to the object.
            //            ds.addData(dragColor, 'color');
            //
            //            // Call the DragManager doDrag() method to start the drag.
            //            DragManager.doDrag(dragInitiator, ds, event);
        }

        private function dragEnterHandler(event:DragEvent):void {
            if (event.dragSource.hasFormat('items')) {
                var dropTarget:Canvas = event.currentTarget as Canvas;
                DragManager.acceptDragDrop(dropTarget);
            }

        }

        private function dragDropHandler(event:DragEvent):void {
            if (event.dragSource.hasFormat('items')) {
                var obj:Object = event.dragSource.dataForFormat('items');
                var n:int = obj.length;
                var i:int;
                var handle:Handle;
                for (i = 0; i < n; i++) {
                    if (obj[i] is HandleData) {
                        handle = new Handle(HandleData(obj[i]));
                    } else if (dto[i] is Handle) {
                        handle = obj[i];
                    }
                    this.addChild(handle);

                    handle.x = event.localX;
                    handle.y = event.localY + i * 20;
                }
            }
        }

        public function createNewTag():void {
            var tag:Tag = new Tag();
            this.addChild(tag);
            tag.tag = "new tag";
            tag.showConfig();
        }


        public function saveDesk():void {
            var a:DeskAction = new DeskAction();
            a.save = true;
            ActionStarter.instance.execute(a, this);
        }


        public function loadDesk():void {
            whipeOut();
            var a:DeskAction = new DeskAction();
            a.save = false;
            ActionStarter.instance.execute(a, this);
        }


        public function whipeOut():void {
            var arr:Array = getChildren();
            var n:int = arr.length;
            for (var i:int = 0; i < n; i++) {
                if (arr[i] is Handle || arr[i] is Tag) {
                    removeChild(arr[i]);
                }
            }

        }

        public function setData(adata:DeskData):void {
            whipeOut();
            dto = adata;

            var n:int = dto.objects.length;
            for (var i:int = 0; i < n; i++) {
                var temp:Data = dto.objects.getItemAt(i);
                if (temp is HandleData) {
                    addChild(new Handle(HandleData(temp)));
                }
                if (temp is TagData) {
                    addChild(new Tag(TagData(temp)));
                }
            }


        }

        public function getData():DeskData {
            dto.objects = new DataTable();
            dto.name = "Harry";
            var arr:Array = getChildren();
            var n:int = arr.length;
            for (var i:int = 0; i < n; i++) {
                var temp:Object = arr[i];
                if (temp is Handle) {
                    dto.objects.addItem(Handle(temp).getData());
                }
                if (temp is Tag) {
                    dto.objects.addItem(Tag(temp).getData());
                }
            }
            return dto;
        }


        ]]></mx:Script>


    <mx:Button label="+" click="createNewTag()" top="10" left="10" color="#3C110B"/>
    <mx:Button label="Save" click="saveDesk()" right="10" bottom="10" color="#2F0D07"/>
    <mx:Button label="Load" click="loadDesk()" right="72" bottom="10" color="#3B1B0B"/>
    <mx:Button label="clean" click="whipeOut()" bottom="10" right="133" fillAlphas="[1.0, 1.0, 1.0, 1.0]"
               color="#3C150B"/>
    <mx:TextInput left="58" bottom="10" id="searchInput1" change="searchChanged(event);" cornerRadius="4"
                  color="#6E1506" width="232"/>
    <mx:Label text="count" width="40" color="#F4410A" textAlign="right" left="10" bottom="12" id="count"/>
    <mx:TextInput left="298" bottom="10" id="searchInput2" change="searchChanged(event);" cornerRadius="4"
                  color="#6E1506" width="232"/>
    <mx:TextInput left="540" bottom="10" id="searchInput3" change="searchChanged(event);" cornerRadius="4"
                  color="#6E1506" width="116"/>

</mx:Canvas>