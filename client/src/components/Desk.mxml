<?xml version="1.0" ?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:ns1="bom.*" xmlns:comps="components.*"
           backgroundAlpha="0.62"
           bottom="0" top="2" left="2" right="2"
           cornerRadius="11" borderStyle="solid" alpha="0.84" themeColor="#ACBCC6"
           backgroundColor="#F5EED9"
           dragEnter="dragEnterHandler(event)"
           dragDrop="dragDropHandler(event)"
        >

    <mx:Script><![CDATA[
        import actions.*;
        import bom.*;
        import mx.collections.ArrayCollection;

        import components.Handle;
        import components.Tag;

        import mx.events.DragEvent;
        import mx.managers.DragManager;

        private function mouseMoveHandler(event:MouseEvent):void {

            //            // Get the drag initiator component from the event object.
            //            var dragInitiator:Canvas=Canvas(event.currentTarget);
            //
            //            // Create a DragSource object.
            //            var ds:DragSource = new DragSource();
            //
            //            // Add the data to the object.
            //            ds.addData(dragColor, 'color');
            //
            //            // Call the DragManager doDrag() method to start the drag.
            //            DragManager.doDrag(dragInitiator, ds, event);
        }

        private function dragEnterHandler(event:DragEvent):void {
            if (event.dragSource.hasFormat('items')) {
                var dropTarget:Canvas = event.currentTarget as Canvas;
                DragManager.acceptDragDrop(dropTarget);
            }

        }

        private function dragDropHandler(event:DragEvent):void {
            if (event.dragSource.hasFormat('items')) {
                var data:Object = event.dragSource.dataForFormat('items');
                var n:int = data.length;
                var i:int;
                for (i = 0; i < n; i++) {
                    var handle:Handle = data[i];
                    this.addChild(handle);
                    handle.x = event.localX;
                    handle.y = event.localY + i * 20;
                }
            }
        }

        public function addTag():void {
            var tag:Tag = new Tag("Tag");
            this.addChild(tag);
            tag.showConfig();
        }


        public function get objects():ArrayCollection {
            var ret:ArrayCollection = new ArrayCollection();
            var arr:Array = getChildren();
            var n:int = arr.length;
            for (var i:int = 0; i < n; i++) {
                if (arr[i] is Handle || arr[i] is Tag) {
                    ret.addItem(arr[i]);
                }
            }
            return ret
        }

        public function set objects(objects:ArrayCollection):void {
            var n:int = objects.length;
            for (var i:int = 0; i < n; i++) {
                addChild(DisplayObject(objects.getItemAt(i)))
            }
        }


        public function saveDesk():void{
            var a:DeskAction = new DeskAction();
            a.save=true;
            ActionContext.instance.execute(a, this);
        }


        public function loadDesk():void{
            var a:DeskAction = new DeskAction();
            a.save=false;
            ActionContext.instance.execute(a, this);
        }
        
        
        ]]></mx:Script>


    <mx:Button label="+" click="addTag()" top="10" left="10"/>
    <mx:Button label="Save" click="saveDesk()" right="10" bottom="10"/>
    <mx:Button label="Load" click="loadDesk()" right="110" bottom="10"/>

</mx:Canvas>